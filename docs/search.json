[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ECON 355: Regression Analysis",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site is the center for online portions of Regression 355, taught by Kelsey Carlston at Gonzaga University."
  },
  {
    "objectID": "02_assignments/lab-03.html",
    "href": "02_assignments/lab-03.html",
    "title": "Lab 3: Introduction to R",
    "section": "",
    "text": "In this lab, you will learn\n\nhow to use RStudio\nhow to make a plot with R\nhow to do math in R, create objects, use functions, etc.,\nins and outs of a typical workflow in R\n\n\n\n\nNo additional packages required this week.\n\n\n\n\nhouse prices\ncounty elections\n\n\n\n\nFor this assignment, the only thing you will turn in on Canvas is a brief write up detailed at the end of the assignment. You will use R to create some statistics based on a new dataset."
  },
  {
    "objectID": "02_assignments/lab-03.html#working-in-rstudio",
    "href": "02_assignments/lab-03.html#working-in-rstudio",
    "title": "Lab 3: Introduction to R",
    "section": "Working in RStudio",
    "text": "Working in RStudio\n{fig-align=“center” fig.alt = “Labeled Panes of RStudio”}\nIf you are going to do anything with R, RStudio is hands-down the best place to do it. RStudio is an open-source integrated development environment (or IDE) that makes programming in R simpler, more efficient, and most importantly, more reproducible. Some of its more user-friendly features are syntax highlighting (it displays code in different colors depending on what it is or does, which makes it easier for you to navigate the code that you’ve written), code completion (it will try to guess what code you are attempting to write and write it for you), and keyboard shortcuts for the more repetitive tasks.\n\nPane layout\nWhen you first open RStudio, you should see three window panes: the Console, the Environment, and the Viewer. If you open an R script, a fourth Source pane will also open. The default layout of these panes is shown in the figure above.\n\nSource. The Source pane provides basic text editing functionality, allowing you to create and edit R scripts. Importantly, you cannot execute the code in these scripts directly, but you can save the scripts that you write as simple text files. A dead give away that you have an R script living on your computer is the .R extension, for example, my_script.R.\n\nConsole. The Console pane, as its name suggests, provides an interface to the R console, which is where your code actually gets run. While you can type R code directly into the console, you can’t save the R code you write there into an R script like you can with the Source editor. That means you should reserve the console for non-essential tasks, meaning tasks that are not required to replicate your results.\nEnvironment. The Environment pane is sort of like a census of your digital zoo, providing a list of its denizens, i.e., the objects that you have created during your session. This pane also has the History tab, which shows the R code you have sent to the console in the order that you sent it.\n\nViewer. The Viewer pane is a bit of a catch-all, including a Files tab, a Plots tab, a Help tab, and a Viewer tab.\n\nThe Files tab works like a file explorer. You can use it to navigate through folders and directories. By default, it is set to your working directory.\nThe Plots tab displays any figures you make with R.\nThe Help tab is where you can go to find helpful R documentation, including function pages and vignettes.\n\n\nLet’s try out a few bits of code just to give you a sense of the difference between Source and Console.\n\nAs you work through this lab, you can practice running code in the Console, but make sure to do the actual exercises in an R script.\n\n\n\nExercises\n\nFirst, let’s open a new R script. To open an R script in RStudio, just click File > New File > R Script (or hit Ctrl + Shift + N, Cmd + Shift + N on Mac OS).\nCopy this code into the console and hit Enter.\n\n\nrep(\"Boba Fett\", 5)\n\n\nNow, copy that code into the R script you just opened and hit Enter again. As you see, the code does not run. Instead, the cursor moves down to the next line. To actually run the code, put the cursor back on the line with the code, and hit Ctrl + Enter (CMD + Enter on Mac OS)."
  },
  {
    "objectID": "02_assignments/lab-03.html#load-in-some-data",
    "href": "02_assignments/lab-03.html#load-in-some-data",
    "title": "Lab 3: Introduction to R",
    "section": "Load in some data",
    "text": "Load in some data\nWe will load in the data “house_prices.csv”, which is posted on Canvas. Save the data into a folder, preferably the same folder as where you are saving your R-script.\n\nSet the working directory\nYou need to tell R what file folder you will be working out of. You can do this in two ways: 1. Go to the “Files” tab in the Viewer pane. Navigate to your folder, then hit the “More” icon, then select “Set As Working Directory”. Since you will want anybody who runs your code to set their working directory, copy the code from the console into your\n2. Type the following code, but instead of your_file_path type the actual folder. Make sure your slashes are forward slashes ( / ) and not back slashes ( \\ ).\n\nsetwd(\"your_file_path\")\n\nFor example, in my script I will type the following, since that’s the folder I’m keeping my data in.\n\nsetwd(\"G:/My Drive/Classes/2023_Spring_ECON_355_Regression/Week 4 - Descriptive Statistics Continued\")\n\n\n\nLoad in the data\nNow that R knows where we have the data stored, we can load the data in.\n\nhouse <- read.csv(\"data/house_prices.csv\")\n\nNote that I have my data in a subfolder of my working directory called “data”. Your code may look more like this:\n\nhouse <- read.csv(\"house_prices.csv\")\n\nThis tells R to read in the csv and call the data frame “house”. You should see the data pop up in your environment. You can click on the word “house” and it will open up the data in the data viewer for you to explore. Or, if you just want a quick look, you can hit the little blue circle with the arrow next to the word “house”.\n\nWe can also ask R to print the first few lines of a dataframe to show us what it looks like. In this case, each row represents a house.\n\nhead(house, n = 5) # The 5 tells R to print 5 rows\n\n   Price Living.Area Bathrooms Age Fireplace Bedrooms\n1 142212        1982         1 133         0        3\n2 134865        1676         2  14         1        3\n3 118007        1694         2  15         1        3\n4 138297        1800         1  49         1        2\n5 129470        2088         1  29         1        3\n\n\nThe Price is how much the house sold for. The Living.Area is the number of square feet the house had. We also have the number of Bathrooms and Bedrooms. Finally, we have the Age of the house and whether it has a Fireplace.\n\n\nCreate some descriptive statistics\nR can work as a calculator. Let’s try a few simple exercises. What is the mean and standard deviation of house price? Note that we have to tell R what data frame we’re getting the variable from (in this case “house”), then put a $ to let R know we’re retrieving an element of the data frame (in this case “Price”).\n\nmean(house$Price)\n\n[1] 167901.9\n\nsd(house$Price)\n\n[1] 77158.35"
  },
  {
    "objectID": "02_assignments/lab-03.html#make-your-first-plot",
    "href": "02_assignments/lab-03.html#make-your-first-plot",
    "title": "Lab 3: Introduction to R",
    "section": "Make Your First Plot!",
    "text": "Make Your First Plot!\nTo ease you into working with R, let’s visualize some data to answer a simple question: Is the price of a house related to its square footage? Don’t worry about understanding all of this! It’s just to give you a feel for the sort of graphics you can make with R. We’ll spend a future lab learning how to make even better graphics.\n\nThe plot() function\nThe base R graphics package provides a generic function for plotting, which - as you might have guessed - is called plot(). (“Base R” means it’s automatically loaded and you don’t have to install it.) To see how it works, try running this code:\n\nplot(house$Living.Area, house$Price)\n\n\n\n\n\n\nCustomizing your plot\nWith the plot() function, you can do a lot of customization to the resulting graphic. For instance, you can modify all of the following:\n\npch will change the point type,\nmain will change the main plot title,\nxlab and ylab will change the x and y axis labels,\ncex will change the size of shapes within the plot region,\npch will change the type of point used (you can use triangles, squares, or diamonds, among others),\ncol changes the color of the point (or its border), and\nbg changes the color of the point fill (depending on the type of point it is)\n\nFor instance, try running this code:\n\nplot(\n  house$Living.Area,\n  house$Price,\n  pch = 21,\n  bg = \"darkorange\",\n  col = \"darkred\",\n  cex = 2\n)\n\n\n\n\n\n\nExercises\n\nComplete the following line of code to preview only the first three rows of the house table.\n\n\nhead(house, n = )\n\n\nModify the code below to change the size (cex) of the points from 2 to 1.5.\n\n\nplot(\n  house$Living.Area,\n  house$Price,\n  pch = 21,\n  bg = \"darkorange\",\n  col = \"darkred\",\n  cex = 2\n)\n\n\nWhat does this plot tell us about the relationship between house size and price? Is it positive or negative? Or is there no relationship at all? If there is a relationship, what might explain it?\nComplete the code below to add “Scatter Plot of House Size and Price” as the main title.\n\n\nplot(\n  house$Living.Area,\n  house$Price,\n  pch = 21,\n  bg = \"darkorange\",\n  col = \"darkred\",\n  cex = 1,\n  main = \n)\n\n\nComplete the code below to add “House size (sq. ft.)” as the x-axis label and “Price ($)” as the y-axis label.\n\n\nplot(\n  house$Living.Area,\n  house$Price,\n  pch = 21,\n  bg = \"darkorange\",\n  col = \"darkred\",\n  cex = 2,\n  main = \"Scatter Plot of House Size and Price\",\n  xlab = ,\n  ylab = \n)"
  },
  {
    "objectID": "02_assignments/lab-03.html#r-basics",
    "href": "02_assignments/lab-03.html#r-basics",
    "title": "Lab 3: Introduction to R",
    "section": "R Basics",
    "text": "R Basics\n\nR is a calculator\nYou can just do math with it:\n\n300 * (2/25)\n\n[1] 24\n\n3^2 + 42\n\n[1] 51\n\nsin(17)\n\n[1] -0.9613975\n\n\n\n\nObjects and Functions\nBut, R is more than just a calculator. There are a lot of things you can make with R, and a lot of things you can do with it. The things that you make are called objects, and the things that you do with objects are called functions. Any complex statistical operation you want to conduct in R will almost certainly involve the use of one or more functions.\n\nCalling functions\nTo use a function, we call it like this:\n\nfunction_name(arg1 = value1, arg2 = value2, ...)\n\nTry calling the seq() function.\n\nseq(from = 1, to = 5)\n\n[1] 1 2 3 4 5\n\n\nAs you can see, this generates a sequence of numbers starting at 1 and ending at 5. There are two things to note about this. First, we do not have to specify the arguments explicitly, but they must be in the correct order:\n\nseq(1, 5) \n\n[1] 1 2 3 4 5\n\nseq(5, 1)\n\n[1] 5 4 3 2 1\n\n\nSecond, the seq() function has additional arguments you can specify, like by and length. While we do not have to specify these because they have default values, you can change one or the other (but not at the same time!):\n\nseq(1, 10, by = 2)\n\n[1] 1 3 5 7 9\n\nseq(1, 10, length = 3)\n\n[1]  1.0  5.5 10.0\n\n\n\n\nCreating objects\nTo make an object in R, you use the arrow, <-, like so:\n\nobject_name <- value\n\nTry creating an object with value 5.137 and assigning it to the name bob, like this:\n\nbob <- 5.137\n\nThere are three things to note here. First, names in R must start with a letter and can only contain letters, numbers, underscores, and periods.\n\n# Good\nwinter_solder <- \"Buckey\"\nobject4 <- 23.2\n\n# Bad\nwinter soldier <- \"Buckey\" # spaces not allowed\n4object <- 23.2            # cannot start with a number\n\nSecond, when you create an object with <-, it ends up in your workspace or environment (you can see it in the RStudio environment pane). Finally, it is worth noting that the advantage of creating objects is that we can take the output of one function and pass it to another.\n\nx <- seq(1, 5, length = 3)\n\nlogx <- log(x)\n\nexp(logx)\n\n[1] 1 3 5\n\n\n\n\n\nExercises\n\nUse seq() to generate a sequence of numbers from 3 to 12.\nUse seq() to generate a sequence of numbers from 3 to 12 with length 25.\nWhy doesn’t this code work?\n\n\nseq(1, 5, by = 2, length = 10)\n\n\nUse <- to create an object with value 25 and assign it to a name of your choice.\nNow try to create another object with a different value and name.\nWhat is wrong with this code?\n\n\n2bob <- 10"
  },
  {
    "objectID": "02_assignments/lab-03.html#assignment",
    "href": "02_assignments/lab-03.html#assignment",
    "title": "Lab 3: Introduction to R",
    "section": "Assignment",
    "text": "Assignment\nNow it’s time to work on your own. Download the “County_Election.csv” data set from Canvas and put it in your working directory. Read in the data using read.csv(). Then, write a paragraph giving some information on the data that you find interesting. Include at least 3 statistics and one graph. Be sure to interpret what you think the significance of the statistic is.\nHere is a table describing the variables in the data set:\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nstate\nState FIPS Code\n\n\ncounty\nCounty FIPS Code\n\n\ncounty_name\nCounty Name\n\n\nstate_name\nState Name\n\n\nfips\nCombined FIPS Code\n\n\npct_republican_2016\nPercent of voters in county that voted Republican in 2016 presidential election\n\n\nfrac_coll_plus2010\nPercent of adults 25 years or older who have a 4-year college degree or more in 2010\n\n\nforeign_share2010\nNumber of foreign born residents in the 2010 Census divided by the sum of native and foreign born residents.\n\n\nmed_hhinc2016\nMedian household income in 2016\n\n\npoor_share2010\nShare of families with incomes under the poverty line in 2010\n\n\nshare_black2010\nShare of people who are Black in 2010\n\n\nshare_hisp2010\nShare of people who are Hispanic in 2010\n\n\nshare_asian2010\nShare of people who are Asian in 2010\n\n\nrent_twobed2015\nThe median gross rent for renter-occupied housing units with two\n\n\npopdensity2010\nNumber of residents per square mile in 2010\n\n\nann_avg_job_growth_2004_2013\nAverage annualized job growth rate over the time period 2004 to 2013\n\n\n\nYou may want to do different statistics from what we did above. Here are some functions you can use. To get information about them, type a question mark followed by the function you are looking up into the console. Alternatively, look the function up online.\n\nStatistics\n\n\n\nStatistic\nFunction\n\n\n\n\nMinimum:\nmin()\n\n\nMaximum:\nmax()\n\n\nAverage:\nmean()\n\n\nStandard Deviation:\nsd()\n\n\nMedian:\nmedian()\n\n\nPercentiles:\nquantile()\n\n\nCorrelation Coefficient:\ncor()\n\n\nFrequency tables:\ntable()\n\n\nRelative Frequency tables:\nprop.table()\n\n\n\nNote that in frequency tables you can use more than one variable!\n\n\nGraphics\n\n\n\nPlot\nFunction\n\n\n\n\nBar chart:\nbarplot()\n\n\nHistogram:\nhist()\n\n\nBox plots:\nboxplot()\n\n\nScatter plot:\nplot()"
  }
]